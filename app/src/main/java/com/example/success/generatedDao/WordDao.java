package com.example.success.generatedDao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.example.success.entity.Word;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WORD".
*/
public class WordDao extends AbstractDao<Word, Long> {

    public static final String TABLENAME = "WORD";

    /**
     * Properties of entity Word.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "USER_ID");
        public final static Property WordChinese = new Property(2, String.class, "wordChinese", false, "WORD_CHINESE");
        public final static Property WordEnglish = new Property(3, String.class, "wordEnglish", false, "WORD_ENGLISH");
        public final static Property WordDate = new Property(4, java.util.Date.class, "wordDate", false, "WORD_DATE");
        public final static Property WordTimes = new Property(5, int.class, "wordTimes", false, "WORD_TIMES");
        public final static Property WordCorrect = new Property(6, int.class, "wordCorrect", false, "WORD_CORRECT");
        public final static Property WordVague = new Property(7, int.class, "wordVague", false, "WORD_VAGUE");
        public final static Property WordPhoto = new Property(8, byte[].class, "wordPhoto", false, "WORD_PHOTO");
    }

    private DaoSession daoSession;

    private Query<Word> user_WordListQuery;

    public WordDao(DaoConfig config) {
        super(config);
    }
    
    public WordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"WORD_CHINESE\" TEXT," + // 2: wordChinese
                "\"WORD_ENGLISH\" TEXT," + // 3: wordEnglish
                "\"WORD_DATE\" INTEGER," + // 4: wordDate
                "\"WORD_TIMES\" INTEGER NOT NULL ," + // 5: wordTimes
                "\"WORD_CORRECT\" INTEGER NOT NULL ," + // 6: wordCorrect
                "\"WORD_VAGUE\" INTEGER NOT NULL ," + // 7: wordVague
                "\"WORD_PHOTO\" BLOB);"); // 8: wordPhoto
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Word entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String wordChinese = entity.getWordChinese();
        if (wordChinese != null) {
            stmt.bindString(3, wordChinese);
        }
 
        String wordEnglish = entity.getWordEnglish();
        if (wordEnglish != null) {
            stmt.bindString(4, wordEnglish);
        }
 
        java.util.Date wordDate = entity.getWordDate();
        if (wordDate != null) {
            stmt.bindLong(5, wordDate.getTime());
        }
        stmt.bindLong(6, entity.getWordTimes());
        stmt.bindLong(7, entity.getWordCorrect());
        stmt.bindLong(8, entity.getWordVague());
 
        byte[] wordPhoto = entity.getWordPhoto();
        if (wordPhoto != null) {
            stmt.bindBlob(9, wordPhoto);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Word entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String wordChinese = entity.getWordChinese();
        if (wordChinese != null) {
            stmt.bindString(3, wordChinese);
        }
 
        String wordEnglish = entity.getWordEnglish();
        if (wordEnglish != null) {
            stmt.bindString(4, wordEnglish);
        }
 
        java.util.Date wordDate = entity.getWordDate();
        if (wordDate != null) {
            stmt.bindLong(5, wordDate.getTime());
        }
        stmt.bindLong(6, entity.getWordTimes());
        stmt.bindLong(7, entity.getWordCorrect());
        stmt.bindLong(8, entity.getWordVague());
 
        byte[] wordPhoto = entity.getWordPhoto();
        if (wordPhoto != null) {
            stmt.bindBlob(9, wordPhoto);
        }
    }

    @Override
    protected final void attachEntity(Word entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Word readEntity(Cursor cursor, int offset) {
        Word entity = new Word( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // wordChinese
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // wordEnglish
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // wordDate
            cursor.getInt(offset + 5), // wordTimes
            cursor.getInt(offset + 6), // wordCorrect
            cursor.getInt(offset + 7), // wordVague
            cursor.isNull(offset + 8) ? null : cursor.getBlob(offset + 8) // wordPhoto
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Word entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setWordChinese(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWordEnglish(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWordDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setWordTimes(cursor.getInt(offset + 5));
        entity.setWordCorrect(cursor.getInt(offset + 6));
        entity.setWordVague(cursor.getInt(offset + 7));
        entity.setWordPhoto(cursor.isNull(offset + 8) ? null : cursor.getBlob(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Word entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Word entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Word entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "wordList" to-many relationship of User. */
    public List<Word> _queryUser_WordList(Long userId) {
        synchronized (this) {
            if (user_WordListQuery == null) {
                QueryBuilder<Word> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                user_WordListQuery = queryBuilder.build();
            }
        }
        Query<Word> query = user_WordListQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

}
