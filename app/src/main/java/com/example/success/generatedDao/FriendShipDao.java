package com.example.success.generatedDao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.success.entity.FriendShip;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FRIEND_SHIP".
*/
public class FriendShipDao extends AbstractDao<FriendShip, Long> {

    public static final String TABLENAME = "FRIEND_SHIP";

    /**
     * Properties of entity FriendShip.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property User1Id = new Property(1, Long.class, "user1Id", false, "USER1_ID");
        public final static Property User2Id = new Property(2, Long.class, "user2Id", false, "USER2_ID");
        public final static Property Status = new Property(3, int.class, "status", false, "STATUS");
    }


    public FriendShipDao(DaoConfig config) {
        super(config);
    }
    
    public FriendShipDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FRIEND_SHIP\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER1_ID\" INTEGER," + // 1: user1Id
                "\"USER2_ID\" INTEGER," + // 2: user2Id
                "\"STATUS\" INTEGER NOT NULL );"); // 3: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FRIEND_SHIP\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FriendShip entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long user1Id = entity.getUser1Id();
        if (user1Id != null) {
            stmt.bindLong(2, user1Id);
        }
 
        Long user2Id = entity.getUser2Id();
        if (user2Id != null) {
            stmt.bindLong(3, user2Id);
        }
        stmt.bindLong(4, entity.getStatus());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FriendShip entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long user1Id = entity.getUser1Id();
        if (user1Id != null) {
            stmt.bindLong(2, user1Id);
        }
 
        Long user2Id = entity.getUser2Id();
        if (user2Id != null) {
            stmt.bindLong(3, user2Id);
        }
        stmt.bindLong(4, entity.getStatus());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FriendShip readEntity(Cursor cursor, int offset) {
        FriendShip entity = new FriendShip( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // user1Id
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // user2Id
            cursor.getInt(offset + 3) // status
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FriendShip entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser1Id(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setUser2Id(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setStatus(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FriendShip entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FriendShip entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FriendShip entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
