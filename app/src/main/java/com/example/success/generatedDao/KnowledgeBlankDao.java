package com.example.success.generatedDao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.example.success.entity.KnowledgeBlank;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "KNOWLEDGE_BLANK".
*/
public class KnowledgeBlankDao extends AbstractDao<KnowledgeBlank, Long> {

    public static final String TABLENAME = "KNOWLEDGE_BLANK";

    /**
     * Properties of entity KnowledgeBlank.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property KnowledgeId = new Property(1, Long.class, "knowledgeId", false, "KNOWLEDGE_ID");
        public final static Property Blank = new Property(2, String.class, "blank", false, "BLANK");
    }

    private Query<KnowledgeBlank> knowledge_KnowledgeBlankListQuery;

    public KnowledgeBlankDao(DaoConfig config) {
        super(config);
    }
    
    public KnowledgeBlankDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"KNOWLEDGE_BLANK\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"KNOWLEDGE_ID\" INTEGER," + // 1: knowledgeId
                "\"BLANK\" TEXT);"); // 2: blank
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"KNOWLEDGE_BLANK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, KnowledgeBlank entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long knowledgeId = entity.getKnowledgeId();
        if (knowledgeId != null) {
            stmt.bindLong(2, knowledgeId);
        }
 
        String blank = entity.getBlank();
        if (blank != null) {
            stmt.bindString(3, blank);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, KnowledgeBlank entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long knowledgeId = entity.getKnowledgeId();
        if (knowledgeId != null) {
            stmt.bindLong(2, knowledgeId);
        }
 
        String blank = entity.getBlank();
        if (blank != null) {
            stmt.bindString(3, blank);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public KnowledgeBlank readEntity(Cursor cursor, int offset) {
        KnowledgeBlank entity = new KnowledgeBlank( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // knowledgeId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // blank
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, KnowledgeBlank entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKnowledgeId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setBlank(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(KnowledgeBlank entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(KnowledgeBlank entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(KnowledgeBlank entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "knowledgeBlankList" to-many relationship of Knowledge. */
    public List<KnowledgeBlank> _queryKnowledge_KnowledgeBlankList(Long knowledgeId) {
        synchronized (this) {
            if (knowledge_KnowledgeBlankListQuery == null) {
                QueryBuilder<KnowledgeBlank> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.KnowledgeId.eq(null));
                knowledge_KnowledgeBlankListQuery = queryBuilder.build();
            }
        }
        Query<KnowledgeBlank> query = knowledge_KnowledgeBlankListQuery.forCurrentThread();
        query.setParameter(0, knowledgeId);
        return query.list();
    }

}
