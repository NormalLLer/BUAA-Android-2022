package com.example.success.generatedDao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.example.success.entity.Knowledge;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "KNOWLEDGE".
*/
public class KnowledgeDao extends AbstractDao<Knowledge, Long> {

    public static final String TABLENAME = "KNOWLEDGE";

    /**
     * Properties of entity Knowledge.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "USER_ID");
        public final static Property KnowledgeContent = new Property(2, String.class, "knowledgeContent", false, "KNOWLEDGE_CONTENT");
        public final static Property KnowledgePhoto = new Property(3, byte[].class, "knowledgePhoto", false, "KNOWLEDGE_PHOTO");
        public final static Property Times = new Property(4, int.class, "times", false, "TIMES");
        public final static Property Title = new Property(5, String.class, "title", false, "TITLE");
        public final static Property KnowledgeDate = new Property(6, java.util.Date.class, "knowledgeDate", false, "KNOWLEDGE_DATE");
        public final static Property KnowledgeCorrect = new Property(7, int.class, "knowledgeCorrect", false, "KNOWLEDGE_CORRECT");
        public final static Property KnowledgeVague = new Property(8, int.class, "knowledgeVague", false, "KNOWLEDGE_VAGUE");
    }

    private DaoSession daoSession;

    private Query<Knowledge> user_KnowledgeListQuery;

    public KnowledgeDao(DaoConfig config) {
        super(config);
    }
    
    public KnowledgeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"KNOWLEDGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"KNOWLEDGE_CONTENT\" TEXT," + // 2: knowledgeContent
                "\"KNOWLEDGE_PHOTO\" BLOB," + // 3: knowledgePhoto
                "\"TIMES\" INTEGER NOT NULL ," + // 4: times
                "\"TITLE\" TEXT," + // 5: title
                "\"KNOWLEDGE_DATE\" INTEGER," + // 6: knowledgeDate
                "\"KNOWLEDGE_CORRECT\" INTEGER NOT NULL ," + // 7: knowledgeCorrect
                "\"KNOWLEDGE_VAGUE\" INTEGER NOT NULL );"); // 8: knowledgeVague
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"KNOWLEDGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Knowledge entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String knowledgeContent = entity.getKnowledgeContent();
        if (knowledgeContent != null) {
            stmt.bindString(3, knowledgeContent);
        }
 
        byte[] knowledgePhoto = entity.getKnowledgePhoto();
        if (knowledgePhoto != null) {
            stmt.bindBlob(4, knowledgePhoto);
        }
        stmt.bindLong(5, entity.getTimes());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
 
        java.util.Date knowledgeDate = entity.getKnowledgeDate();
        if (knowledgeDate != null) {
            stmt.bindLong(7, knowledgeDate.getTime());
        }
        stmt.bindLong(8, entity.getKnowledgeCorrect());
        stmt.bindLong(9, entity.getKnowledgeVague());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Knowledge entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        String knowledgeContent = entity.getKnowledgeContent();
        if (knowledgeContent != null) {
            stmt.bindString(3, knowledgeContent);
        }
 
        byte[] knowledgePhoto = entity.getKnowledgePhoto();
        if (knowledgePhoto != null) {
            stmt.bindBlob(4, knowledgePhoto);
        }
        stmt.bindLong(5, entity.getTimes());
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(6, title);
        }
 
        java.util.Date knowledgeDate = entity.getKnowledgeDate();
        if (knowledgeDate != null) {
            stmt.bindLong(7, knowledgeDate.getTime());
        }
        stmt.bindLong(8, entity.getKnowledgeCorrect());
        stmt.bindLong(9, entity.getKnowledgeVague());
    }

    @Override
    protected final void attachEntity(Knowledge entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Knowledge readEntity(Cursor cursor, int offset) {
        Knowledge entity = new Knowledge( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // knowledgeContent
            cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3), // knowledgePhoto
            cursor.getInt(offset + 4), // times
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // title
            cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)), // knowledgeDate
            cursor.getInt(offset + 7), // knowledgeCorrect
            cursor.getInt(offset + 8) // knowledgeVague
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Knowledge entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setKnowledgeContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setKnowledgePhoto(cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3));
        entity.setTimes(cursor.getInt(offset + 4));
        entity.setTitle(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setKnowledgeDate(cursor.isNull(offset + 6) ? null : new java.util.Date(cursor.getLong(offset + 6)));
        entity.setKnowledgeCorrect(cursor.getInt(offset + 7));
        entity.setKnowledgeVague(cursor.getInt(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Knowledge entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Knowledge entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Knowledge entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "knowledgeList" to-many relationship of User. */
    public List<Knowledge> _queryUser_KnowledgeList(Long userId) {
        synchronized (this) {
            if (user_KnowledgeListQuery == null) {
                QueryBuilder<Knowledge> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UserId.eq(null));
                user_KnowledgeListQuery = queryBuilder.build();
            }
        }
        Query<Knowledge> query = user_KnowledgeListQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

}
