package com.example.success.generatedDao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.example.success.entity.WordLabel;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WORD_LABEL".
*/
public class WordLabelDao extends AbstractDao<WordLabel, Long> {

    public static final String TABLENAME = "WORD_LABEL";

    /**
     * Properties of entity WordLabel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property WordId = new Property(1, Long.class, "wordId", false, "WORD_ID");
        public final static Property LabelId = new Property(2, Long.class, "labelId", false, "LABEL_ID");
    }

    private Query<WordLabel> word_WordLabelListQuery;

    public WordLabelDao(DaoConfig config) {
        super(config);
    }
    
    public WordLabelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WORD_LABEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"WORD_ID\" INTEGER," + // 1: wordId
                "\"LABEL_ID\" INTEGER);"); // 2: labelId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WORD_LABEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WordLabel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long wordId = entity.getWordId();
        if (wordId != null) {
            stmt.bindLong(2, wordId);
        }
 
        Long labelId = entity.getLabelId();
        if (labelId != null) {
            stmt.bindLong(3, labelId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WordLabel entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long wordId = entity.getWordId();
        if (wordId != null) {
            stmt.bindLong(2, wordId);
        }
 
        Long labelId = entity.getLabelId();
        if (labelId != null) {
            stmt.bindLong(3, labelId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public WordLabel readEntity(Cursor cursor, int offset) {
        WordLabel entity = new WordLabel( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // wordId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2) // labelId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WordLabel entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWordId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setLabelId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(WordLabel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(WordLabel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(WordLabel entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "wordLabelList" to-many relationship of Word. */
    public List<WordLabel> _queryWord_WordLabelList(Long wordId) {
        synchronized (this) {
            if (word_WordLabelListQuery == null) {
                QueryBuilder<WordLabel> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.WordId.eq(null));
                word_WordLabelListQuery = queryBuilder.build();
            }
        }
        Query<WordLabel> query = word_WordLabelListQuery.forCurrentThread();
        query.setParameter(0, wordId);
        return query.list();
    }

}
